# dominance_network_analysis.R
# Script to analyze dominance networks using a simulated dataset
# Author: Ana Melisa Fernandes (fernandesanameli@gmail.com)

# Load required libraries
library(igraph)
library(Perc)

# === Load Data ===
adj_matrix <- read.csv("fake_adjacency_matrix.csv", sep = ";", row.names = 1)
wa_data <- read.csv("fake_weights_abundance.csv", sep = ";")

# Ensure names match
rownames(adj_matrix) <- colnames(adj_matrix)
adj_matrix <- as.matrix(adj_matrix)

# === Create igraph object ===
net <- graph_from_adjacency_matrix(adj_matrix, mode = "directed", weighted = TRUE)
net <- simplify(net, remove.multiple = FALSE, remove.loops = TRUE)

# === Add node attributes ===
V(net)$name <- rownames(adj_matrix)
V(net)$Weight <- wa_data$Weight
V(net)$Abundance <- wa_data$Abundance
V(net)$size <- V(net)$Weight * 15
V(net)$color <- colorRampPalette(c("lightblue", "blue"))(50)[as.numeric(cut(V(net)$Abundance, breaks = 50))]

# === Plot the network ===
plot(
  net,
  layout = layout.circle,
  edge.curved = 0.2,
  edge.arrow.size = 0.3,
  edge.width = E(net)$weight / 2,
  edge.color = colorRampPalette(c("gray", "black"))(5)[E(net)$weight],
  vertex.label.cex = 0.7,
  vertex.label.color = "black",
  vertex.label.font = 1,
  vertex.label.dist= 1
)

# === Hub and Authority Scores ===
hs <- hub_score(net, weights = NA)$vector
as <- authority_score(net, weights = NA)$vector

par(mfrow = c(1, 2))

plot(net, vertex.size = hs * 50, main = "Hubs",
     layout = layout.circle,
     edge.curved = 0.2,
     edge.arrow.size = 0.3,
     vertex.label.cex = 0.7,
     vertex.label.color = "black",
     vertex.label.font = 1,
     vertex.label.dist= 1)
plot(net, vertex.size = as * 50, main = "Authorities",
     layout = layout.circle,
     edge.curved = 0.2,
     edge.arrow.size = 0.3,
     vertex.label.cex = 0.7,
     vertex.label.color = "black",
     vertex.label.font = 1,
     vertex.label.dist= 1)

# === Dominance Ranking using Perc ===
diag(adj_matrix) <- 0
conf_matrix <- as.conflictmat(adj_matrix, weighted = TRUE)
dom_prob <- conductance(conf_matrix, maxLength = 2)
#let's incorporate information from indirect pathways from the original conflict matrix
dom_prob$imputed.conf
informationGainadj_matrix <- dom_prob$imputed.conf - conf_matrix
informationGainadj_matrix

# === Plot dominance matrix ===
plotConfmat(dom_prob$imputed.conf - conf_matrix, ordering = NA, labels = TRUE)

#generating a heatmap representing information gained 
plotConfmat(informationGainadj_matrix, ordering= NA, labels= TRUE)

#Dominance probability matrix
dom_prob$p.hat
dyadicLongConverter(dom_prob$p.hat)

# Simulate ranking order and costs for each simulated, the best is the one with lowest cost.
s.rank <- simRankOrder(dom_prob$p.hat)
sim_result <- simRankOrder(dom_prob$p.hat)
plotConfmat(dom_prob$p.hat, ordering = sim_result[[1]]$ID, labels = TRUE)

# Output final ranking
print(sim_result$BestSimulatedRankOrder)
plotConfmat(dom_prob$p.hat, ordering = s.rank[[1]]$ID, labels = TRUE)

valueConverter(dom_prob$p.hat) #Dominance certainty
individualDomProb(dom_prob$p.hat)

# === Network Metrics ===
binary_matrix <- adj_matrix
binary_matrix[binary_matrix > 0] <- 1
net_pa <- graph_from_adjacency_matrix(binary_matrix, mode = "directed", weighted = NULL)

#Global network measures
Global_Network_indices <- c("net_pa")
group<-as.data.frame(Global_Network_indices)
group$Density <- edge_density(net_pa, loops=F)
group$Reciprocity <-reciprocity(net_pa)
group$Average_Path_Length <-mean_distance(net_pa, directed=TRUE, unconnected=T)
group$Out_degree_Centralization <-centr_degree(net_pa, mode= "out")$centralization
group

#individual network measures
Speciesnet_pa <- V(net_pa)$name
group<-as.data.frame(Speciesnet_pa)
group$outdeg_net_pa<-degree(net_pa, mode="out")
group$indeg_net_pa<-degree(net_pa, mode="in")
group$outclose_net_pa<-closeness(net_pa, mode="out", normalized=TRUE)
group$inclose_net_pa<-closeness(net_pa, mode="in", normalized=TRUE) 
group$betweenness_net_pa<-betweenness(net_pa, normalized=TRUE)
group$hs_net_pa <- hub_score(net_pa, weights=NA)$vector
group$as_net_pa <- authority_score(net_pa, weights=NA)$vector
group
